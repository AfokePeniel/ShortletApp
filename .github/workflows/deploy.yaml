name: Build, Push, and Deploy to GKE

on:
  push:
    branches: [ main ]

env:
  GKE_CLUSTER: time-api-cluster
  GKE_ZONE: us-central1
  DEPLOYMENT_NAME: time-api
  IMAGE: time-api

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Setup gcloud CLI
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: 'Use gcloud CLI'
      run: 'gcloud info'

    # Configure Docker to use the gcloud command-line tool as a credential helper
    - name: Configure Docker
      run: |
        gcloud --quiet auth configure-docker

    # Build the Docker image
    - name: Build
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:${{ github.sha }} ./api

    # Push the Docker image to Docker Hub
    - name: Push to Docker Hub
      run: |
        docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:${{ github.sha }}

    # Enable necessary APIs
    - name: Enable APIs
      run: |
        gcloud services enable container.googleapis.com || true
        gcloud services list --enabled | grep container.googleapis.com || (echo "Failed to enable Kubernetes Engine API" && exit 1)

    # Grant necessary roles to the service account
    - name: Grant necessary roles
      run: |
        gcloud projects add-iam-policy-binding ${{ secrets.GCP_PROJECT_ID }} \
          --member="serviceAccount:trf-gcp@afoke-shortletapp.iam.gserviceaccount.com" \
          --role="roles/container.admin"
        gcloud projects add-iam-policy-binding ${{ secrets.GCP_PROJECT_ID }} \
          --member="serviceAccount:trf-gcp@afoke-shortletapp.iam.gserviceaccount.com" \
          --role="roles/compute.viewer"
        gcloud projects add-iam-policy-binding ${{ secrets.GCP_PROJECT_ID }} \
          --member="serviceAccount:trf-gcp@afoke-shortletapp.iam.gserviceaccount.com" \
          --role="roles/serviceusage.serviceUsageAdmin"
        gcloud projects add-iam-policy-binding ${{ secrets.GCP_PROJECT_ID }} \
          --member="serviceAccount:trf-gcp@afoke-shortletapp.iam.gserviceaccount.com" \
          --role="roles/iam.serviceAccountUser"

    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }}

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |
        kubectl set image deployment/$DEPLOYMENT_NAME $DEPLOYMENT_NAME=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:${{ github.sha }} -n time-api
        kubectl rollout status deployment/$DEPLOYMENT_NAME -n time-api

    # Test the deployed application
    - name: Test API
      run: |
        EXTERNAL_IP=$(kubectl get service time-api-service -n time-api -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        response=$(curl -s -o /dev/null -w "%{http_code}" http://$EXTERNAL_IP)
        if [ $response = "200" ]; then
          echo "API is accessible"
        else
          echo "API is not accessible"
          exit 1
        fi