name: Deploy to GKE

on:
  push:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: time-api-cluster
  GKE_ZONE: us-central1
  IMAGE: time-api
  REGION: us-central1
  SERVICE_ACCOUNT: ${{ secrets.GCP_SA_EMAIL }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Enable necessary APIs
      run: |
        gcloud services enable cloudresourcemanager.googleapis.com
        gcloud services enable artifactregistry.googleapis.com

    - name: Add Artifact Registry Admin role
      run: |
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:$SERVICE_ACCOUNT" \
          --role="roles/artifactregistry.admin"
        
    - name: Create Artifact Registry Repository
      run: |
        gcloud artifacts repositories create $IMAGE \
          --project=$PROJECT_ID \
          --repository-format=docker \
          --location=$REGION \
          --description="Docker repository for $IMAGE" \
          || echo "Repository may already exist, continuing..."
        
    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker $REGION-docker.pkg.dev

    - name: Build Docker image
      run: docker build -t $REGION-docker.pkg.dev/$PROJECT_ID/$IMAGE/$IMAGE:$GITHUB_SHA api/

    - name: Push Docker image
      run: docker push $REGION-docker.pkg.dev/$PROJECT_ID/$IMAGE/$IMAGE:$GITHUB_SHA

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Plan
      run: terraform plan -var="project_id=$PROJECT_ID" 
      working-directory: ./terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve -var="project_id=$PROJECT_ID" 
      working-directory: ./terraform

    - name: Get GKE credentials
      run: gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE

    - name: Update Kubernetes deployment
      run: |
        kubectl set image deployment/time-api time-api=$REGION-docker.pkg.dev/$PROJECT_ID/$IMAGE/$IMAGE:$GITHUB_SHA -n time-api
        kubectl rollout status deployment/time-api -n time-api

    - name: Test API
      run: |
        EXTERNAL_IP=$(kubectl get service time-api-service -n time-api -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        response=$(curl -s -o /dev/null -w "%{http_code}" http://$EXTERNAL_IP)
        if [ $response = "200" ]; then
          echo "API is accessible"
        else
          echo "API is not accessible"
          exit 1
        fi