name: Deploy to GKE using Terraform

on:
  push:
    branches: [ main ]

env:
  TF_VERSION: '1.0.0'
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}

    - name: Build and push Docker image
      run: |
        docker build -t gcr.io/${{ env.GCP_PROJECT_ID }}/time-api:${{ github.sha }} ./api
        gcloud auth configure-docker -q
        docker push gcr.io/${{ env.GCP_PROJECT_ID }}/time-api:${{ github.sha }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Import existing resources
      run: |
        cd terraform
        terraform import data.google_compute_firewall.allow_internal projects/${{ secrets.GCP_PROJECT_ID }}/global/firewalls/allow-internal
        terraform import data.google_container_cluster.primary projects/${{ secrets.GCP_PROJECT_ID }}/us-central1/time-api-cluster
      continue-on-error: true

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
                       -var="image_tag=${{ github.sha }}" \
                       -var="terraform_service_account=${{ secrets.TERRAFORM_SERVICE_ACCOUNT }}" \
                       -out=tfplan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

    - name: Verify Deployment
      run: |
        gcloud container clusters get-credentials your-cluster-name --zone your-zone --project ${{ env.GCP_PROJECT_ID }}
        kubectl get services -n time-api
        # Add commands to test your API endpoint
