name: Build, Push, and Deploy to GKE

on:
  push:
    branches: [ main ]

env:
  GKE_CLUSTER: time-api-cluster
  GKE_ZONE: us-central1
  DEPLOYMENT_NAME: time-api
  IMAGE: time-api
  USE_GKE_GCLOUD_AUTH_PLUGIN: True

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Setup gcloud CLI
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: 'Use gcloud CLI'
      run: 'gcloud info'

    # Install gke-gcloud-auth-plugin
    - name: Install gke-gcloud-auth-plugin
      run: |
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
        sudo apt-get update
        sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin
        echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

    # Configure Docker to use the gcloud command-line tool as a credential helper
    - name: Configure Docker
      run: |
        gcloud --quiet auth configure-docker

    # Build the Docker image
    - name: Build
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:${{ github.sha }} ./api

    # Push the Docker image to Docker Hub
    - name: Push to Docker Hub
      run: |
        docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:${{ github.sha }}

    # Enable necessary APIs
    - name: Enable APIs
      run: |
        gcloud services enable container.googleapis.com || true
        gcloud services list --enabled | grep container.googleapis.com || (echo "Failed to enable Kubernetes Engine API" && exit 1)

    # Grant necessary roles to the service account
    - name: Grant necessary roles
      run: |
        SERVICE_ACCOUNT="trf-gcp@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com"
        gcloud projects add-iam-policy-binding ${{ secrets.GCP_PROJECT_ID }} \
          --member="serviceAccount:${SERVICE_ACCOUNT}" \
          --role="roles/container.admin"
        gcloud projects add-iam-policy-binding ${{ secrets.GCP_PROJECT_ID }} \
          --member="serviceAccount:${SERVICE_ACCOUNT}" \
          --role="roles/compute.admin"
        gcloud projects add-iam-policy-binding ${{ secrets.GCP_PROJECT_ID }} \
          --member="serviceAccount:${SERVICE_ACCOUNT}" \
          --role="roles/iam.serviceAccountUser"
        gcloud projects add-iam-policy-binding ${{ secrets.GCP_PROJECT_ID }} \
          --member="serviceAccount:${SERVICE_ACCOUNT}" \
          --role="roles/serviceusage.serviceUsageAdmin"
        gcloud projects add-iam-policy-binding ${{ secrets.GCP_PROJECT_ID }} \
          --member="serviceAccount:${SERVICE_ACCOUNT}" \
          --role="roles/compute.networkAdmin"
    # Create VPC and Subnet if they don't exist
    - name: Create VPC and Subnet
      run: |
        # Check if VPC exists, create if it doesn't
        if ! gcloud compute networks describe time-api-vpc --project=${{ secrets.GCP_PROJECT_ID }} &>/dev/null; then
          echo "Creating VPC: time-api-vpc"
          gcloud compute networks create time-api-vpc --project=${{ secrets.GCP_PROJECT_ID }} --subnet-mode=custom
        else
          echo "VPC time-api-vpc already exists"
        fi
        
        # Check if subnet exists, create if it doesn't
        if ! gcloud compute networks subnets describe time-api-subnet --project=${{ secrets.GCP_PROJECT_ID }} --region=${{ env.GKE_ZONE }} &>/dev/null; then
          echo "Creating Subnet: time-api-subnet"
          gcloud compute networks subnets create time-api-subnet \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --region=${{ env.GKE_ZONE }} \
            --network=time-api-vpc \
            --range=10.0.0.0/24
        else
          echo "Subnet time-api-subnet already exists"
        fi
    # Check if GKE cluster exists, create if it doesn't
    - name: Check and Create GKE cluster
      run: |
        SERVICE_ACCOUNT="trf-gcp@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com"
        echo "Checking for existing GKE cluster: ${{ env.GKE_CLUSTER }}"
        if gcloud container clusters describe ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }} &>/dev/null; then
          echo "Cluster ${{ env.GKE_CLUSTER }} already exists"
        else
          echo "Creating GKE cluster with service account: ${SERVICE_ACCOUNT}"
          gcloud container clusters create ${{ env.GKE_CLUSTER }} \
            --project ${{ secrets.GCP_PROJECT_ID }} \
            --zone ${{ env.GKE_ZONE }} \
            --num-nodes 1 \
            --machine-type e2-medium \
            --network time-api-vpc \
            --subnetwork time-api-subnet \
            --enable-ip-alias \
            --enable-autoscaling \
            --min-nodes 1 \
            --max-nodes 3 \
            --no-enable-master-authorized-networks \
            --addons HorizontalPodAutoscaling,HttpLoadBalancing \
            --enable-autoupgrade \
            --enable-autorepair \
            --service-account="${SERVICE_ACCOUNT}" || (echo "Failed to create GKE cluster" && exit 1)
        fi
    # Verify the service account
    - name: Verify service account
      run: |
        gcloud auth list
        gcloud config get-value account

    # Wait for the cluster to be ready
    - name: Wait for cluster to be ready
      run: |
        echo "Waiting for cluster to be ready..."
        while [[ $(gcloud container clusters list --filter="name=${{ env.GKE_CLUSTER }}" --format="value(status)") != "RUNNING" ]]; do
          sleep 10
        done
        echo "Cluster is ready!"
    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }}
        kubectl config view

    # Create namespace if it doesn't exist
    - name: Create namespace
      run: |
        kubectl create namespace time-api --dry-run=client -o yaml | kubectl apply -f -

    # Deploy the Docker image to the GKE cluster and create/update service
    - name: Deploy and Expose
      run: |
        echo "Current context:"
        kubectl config current-context
        
        echo "Checking if namespace exists:"
        kubectl create namespace time-api --dry-run=client -o yaml | kubectl apply -f -
        
        echo "Deploying/Updating deployment:"
        kubectl create deployment $DEPLOYMENT_NAME --image=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:${{ github.sha }} -n time-api --dry-run=client -o yaml | kubectl apply -f -
        
        echo "Updating deployment image:"
        kubectl set image deployment/$DEPLOYMENT_NAME $DEPLOYMENT_NAME=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:${{ github.sha }} -n time-api
        
        echo "Waiting for deployment to roll out:"
        kubectl rollout status deployment/$DEPLOYMENT_NAME -n time-api --timeout=5m
        
        echo "Creating/Updating service:"
        kubectl expose deployment $DEPLOYMENT_NAME --type=LoadBalancer --port=80 --target-port=8080 -n time-api --dry-run=client -o yaml | kubectl apply -f -
        
        echo "Waiting for service to get external IP:"
        for i in {1..30}; do
          EXTERNAL_IP=$(kubectl get service $DEPLOYMENT_NAME -n time-api --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}")
          if [ -n "$EXTERNAL_IP" ]; then
            echo "Service $DEPLOYMENT_NAME is now accessible at $EXTERNAL_IP"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Timeout waiting for external IP"
            exit 1
          fi
          echo "Waiting for external IP... (Attempt $i/30)"
          sleep 10
        done
        
        echo "Deployment status:"
        kubectl get deployment $DEPLOYMENT_NAME -n time-api -o wide
        
        echo "Service status:"
        kubectl get service $DEPLOYMENT_NAME -n time-api -o wide
        
        echo "Pod status:"
        kubectl get pods -n time-api -l app=$DEPLOYMENT_NAME
        
        echo "Deployment logs:"
        kubectl logs deployment/$DEPLOYMENT_NAME -n time-api --tail=50 || echo "No logs available yet"

    # Test the deployed application
    - name: Test API
      run: |
        EXTERNAL_IP=$(kubectl get service $DEPLOYMENT_NAME -n time-api --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}")
        if [ -z "$EXTERNAL_IP" ]; then
          echo "Failed to get external IP"
          exit 1
        fi
        echo "Testing API at http://$EXTERNAL_IP"
        response=$(curl -s -o /dev/null -w "%{http_code}" http://$EXTERNAL_IP)
        if [ $response = "200" ]; then
          echo "API is accessible"
        else
          echo "API is not accessible, got HTTP response code: $response"
          exit 1
        fi